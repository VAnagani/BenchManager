<div id="divBenchEmployees">
@model IEnumerable<BenchMANAGER.ViewModels.BenchEmployeeViewModel>

@{
    ViewBag.Title = "AddResources";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var benchGrid = new WebGrid(Model, canPage: true, canSort: false, rowsPerPage: 20,
    selectionFieldName: "selectedRow");

}

@{
    ViewBag.PracticeList = new SelectList(new[]
                {
                new SelectListItem { Text = "AIM", Value = "AIM", Selected = true },
                new SelectListItem { Text = "CCM - CPP", Value = "CCM - CPP"},
                new SelectListItem { Text = "CCM - Java", Value = "CCM - Java"},
                new SelectListItem { Text = "CCM - Microsoft", Value = "CCM - Microsoft"},
                new SelectListItem { Text = "Clinical Trial Management", Value = "Clinical Trial Management"},
                new SelectListItem { Text = "Cloud Solutions", Value = "Cloud Solutions"},
                new SelectListItem { Text = "Digital Solutions", Value = "Digital Solutions"},
                new SelectListItem { Text = "EAS", Value = "EAS"},
                new SelectListItem { Text = "IMS - ITSM", Value = "IMS - ITSM"},
                new SelectListItem { Text = "IMS - Maintenance", Value = "IMS - Maintenance"},
                new SelectListItem { Text = "IMS - Security", Value = "IMS - Security"},
                new SelectListItem { Text = "IT Services Others", Value = "IT Services Others"},
                new SelectListItem { Text = "No Service Line", Value = "No Service Line"},
                new SelectListItem { Text = "Ops Consulting", Value = "Ops Consulting"},
                new SelectListItem { Text = "Sales BPO", Value = "Sales BPO"},
                new SelectListItem { Text = "SG&A", Value = "SG&A"},
            }, "Value", "Text");

}


@{
        var locationType = new SelectList(new[]
        {
                new SelectListItem { Text = "---Location Type---", Value = "---Location Type---" },
                new SelectListItem { Text = "OFFSHORE", Value = "OFFSHORE" },
                new SelectListItem { Text = "ONSITE", Value = "ONSITE"}

            }, "Value", "Text");




}

@{
    var location = new SelectList(new[]
    {
                new SelectListItem { Text = "---Location---", Value = "---Location---" },
                new SelectListItem { Text = "Bangalore", Value = "Bangalore" },
                new SelectListItem { Text = "Chennai", Value = "Chennai"},
                new SelectListItem { Text = "Hyderabad", Value = "Hyderabad" },
                new SelectListItem { Text = "SVO", Value = "SVO"},
                new SelectListItem { Text = "UAE", Value = "UAE" },
                new SelectListItem { Text = "Virginia", Value = "Virginia"}

            }, "Value", "Text");

}


@{
    var assignmentStatus = new SelectList(new[]
    {
                new SelectListItem { Text = "---Status---", Value = "---Status---" },
                new SelectListItem { Text = "Billed", Value = "Billed" },
                new SelectListItem { Text = "ITS Support", Value = "ITS Support"},
                new SelectListItem { Text = "Non-Billed", Value = "Non-Billed" },


            }, "Value", "Text");
}

<style>
    .container
    {
        margin-left:0px !important;
    }
</style>

@section scripts {

    <script>
        $(document).ready(function () {

            
            
            $(function () {

                $('.edit-mode').hide();
                $('.ui-icon-circle-check').hide();
                $('.ui-icon-closethick').hide();

                $('.ui-icon-pencil').on('click', function () {

                    var tr = $(this).parents('tr:first');
                    tr.find('.edit-mode, .display-mode').toggle();
                    tr.find('.ui-icon-pencil').hide();
                    tr.find('.ui-icon-circle-check').show();
                    tr.find('.ui-icon-closethick').show();

                    tr.find('.edit-mode').closest('.date-picker').datepicker({
                        changeMonth: true,
                        changeYear: true,
                        showButtonPanel: true,
                        dateFormat: 'mm/dd/yy',
                        showStatus: true,
                        showWeeks: true,
                        highlightWeek: true,
                        numberOfMonths: 1,
                        showAnim: "scale",
                        showOptions: {
                            origin: ["top", "left"]
                        }
                    });
                });

                $('.ui-icon-circle-check').on('click', function () {
                    //debugger;
                    var tr = $(this).parents('tr:first');
                    var benchempId = tr.find("#lblBenchEmployeeID").text();
                    var spoc = tr.find('#txtSPOC').val();
                    var projectCode = tr.find('#txtProjectCode').val();
                    var startDate = tr.find('.date-picker').closest('.start-date').val();
                    var endDate = tr.find('.date-picker').closest('.end-date').val();
                    var locationType = tr.find('#ddlLocationType option:selected').text();
                    var location = tr.find('#ddlLocation option:selected').text();
                    var assignStatus = tr.find('#ddlAssignmentStatus option:selected').text();
                    var utilization = tr.find('#txtUtilization').val();
                    var comments = tr.find('#txtComments').text();
                    $.ajax({
                        type: "POST",
                        data: { BenchEmployeeID: benchempId, SPOC: spoc, ProjectCode: projectCode, StartDate: startDate, EndDate: endDate, LocationType: locationType, Location: location, Status: assignStatus, Utilization: utilization, Comments: comments },
                        url: '@Url.Action("UpdateBenchResource", "Bench")',
                        success: function (result) {

                            alert('Updated successfully!!');
                            window.location.href = '@Url.Action("AddResources", "Bench")';
                        }
                    });

                });

                $('.ui-icon-closethick').on('click', function () {

                    var tr = $(this).parents('tr:first');
                    tr.find('.edit-mode, .display-mode').toggle();
                    tr.find('.ui-icon-pencil').show();
                    tr.find('.ui-icon-circle-check').hide();
                    tr.find('.ui-icon-closethick').hide();

                    tr.find('#txtSPOC').val('');
                    tr.find('#txtProjectCode').val('');
                    tr.find('.date-picker').closest('.start-date').val('');
                    tr.find('.date-picker').closest('.end-date').val('');
                    tr.find('#ddlLocationType option:selected').text('---Location Type---');
                    tr.find('#ddlLocation option:selected').text('---Location---');
                    tr.find('#ddlAssignmentStatus option:selected').text('---Status---');
                    tr.find('#txtUtilization').val('');
                    tr.find('#txtComments').text('');
                    //Reset();

                });

            });

            



            $("#BenchEmpFirstName").autocomplete({
                source: '@Url.Action("GetBenchResource")',
                select: function (event, ui) {

                    var empName = ui.item.label;

                    //$.ajax({
                    //    type: "POST",
                    //    data: { benchEmployeeName: empName },
                    //    url: '@Url.Action("SearchBenchEmployee", "Bench")',
                    //    datatype: "json",
                    //    success: function (result) {
                    //        //debugger;
                    //        //var result = result.replace('<script type="text/javascript">', '<script type="text/javascript"> $(".benchWebGrid").undelegate();');
                    //        //$('#benchGridContent').undelegate();
                    //        //$('#benchEmployeeGrid').html(result);
                            
                    //        //$("#benchGridContent").html(result);
                    //        $("#divBenchEmployees").empty();
                    //        $("#divBenchEmployees").html(result);
                    //    }
                    //});
                }
            });

            $("#AutoSPOC").autocomplete({
                source: '@Url.Action("GetBenchSPOC")',
                select: function (event, ui) {

                    var empName = ui.item.label;


                }
            });
            

            $("#txtSPOC").autocomplete({
                source: '@Url.Action("GetBenchSPOC")'
                
            });

            
            $("#btnSearch").click(function () {
                //debugger;
                var spoc = $('#AutoSPOC').val();
                var resource = $('#BenchEmpFirstName').val();
                var practice = $('#ddlPractise option:selected').val();

                $.ajax({
                    type: "POST",
                    data: { SPOC: spoc, Practice: practice, Resource: resource },
                    url: '@Url.Action("SearchBenchEmployee", "Bench")',
                    success: function (result) {
                        //debugger;
                        $("#divBenchEmployees").empty();
                        $("#divBenchEmployees").html(result);
                        $('#ddlPractise option:selected').text(practice);
                        $('#BenchEmpFirstName').val(resource);
                        $('#AutoSPOC').val(spoc);
                    }
                });
            });

            $("#btnParse").click(function () {

                var url = $(this).attr('href');
                $("#dialog-view").dialog({
                    title: 'Parse Employee',
                    autoOpen: false,
                    resizable: false,
                    height: 400,
                    width: 350,
                    show: { effect: 'drop', direction: "up" },
                    modal: true,
                    draggable: true,
                    open: function (event, ui) {
                        $(this).load(url);

                    },
                    buttons: {
                        "OK": function () {
                            //debugger;
                            var employeeNumbers = $("#txtEmployeeNumber").val().replace(/\n/g, ' ');
                            if (employeeNumbers != "") {
                                $.ajax({
                                    type: "POST",
                                    data: { empNumbers: employeeNumbers },
                                    url: '@Url.Action("AddResources", "Bench")',
                                    success: function (result) {
                                        if (result.responseText != null) {
                                            alert('Employee Numbers: ' + result.responseText + ' which are already exists and remaining added successfully');
                                        }
                                        else {
                                            alert('Employees successfully added!!');
                                        }

                                        window.location.href = '@Url.Action("AddResources", "Bench")';
                                    }
                                });
                            }
                            $(this).dialog("close");

                        },
                        "Close": function () {
                            $(this).dialog("close");

                        }
                    },
                    close: function (event, ui) {
                        $(this).dialog('close');
                    }
                });

                $("#dialog-view").dialog('open');
                return false;

                //debugger;


            });


            $("#btnMovetoProject").on('click', function () {
                var tr = $(this).parents('tr:first');
                var benchempId = tr.find("#lblBenchEmployeeID").text();

            });

        });



    </script>
}



    <h2>Bench Resources</h2>
    
        <div>
            
            <div>

@using (Html.BeginForm("AddResources", "Bench", FormMethod.Get))
{

<table class="search"><tr>
<td>@Html.TextBox("BenchEmpFirstName", "", new { @class = "EmpnameAutoComplete", @placeholder = "---Resource Name---" })</td>
<td>@Html.TextBox("AutoSPOC", "", new { @class = "EmpnameAutoComplete", @placeholder = "---SPOC---" })</td>
<td>@Html.DropDownList("ddlPractise", (IEnumerable<SelectListItem>)ViewBag.PracticeList,"---Practice---")</td></tr>
<tr><td colspan="3"><input type="button" id="btnSearch" value="Search" style="float:right;" onclick="$('form').submit()"/></td></tr>
</table>
}
<input type="button" id="btnParse" value="Parse" style="margin-right:80px;" />              
                
            </div>
            
        </div>
        <div id="dialog-view" style="display: none">
            <textarea rows="10" cols="50" id="txtEmployeeNumber"></textarea>
            <p><b>Note: </b>To add multiple employees, please enter employee numbers with comma separated</p>
        </div>
        <div id="benchGridContent">
    @benchGrid.GetHtml(tableStyle: "benchWebGrid",
                fillEmptyRows: true, 
                headerStyle: "header",
                alternatingRowStyle: "alt",
                selectedRowStyle: "select",
                mode: WebGridPagerModes.All,
     firstText: "<< First",
     previousText: "< Prev",
     nextText: "Next >",
     lastText: "Last >>",
     htmlAttributes: new { id = "benchEmployeeGrid" },
                columns: benchGrid.Columns(

                    benchGrid.Column("",

                        format: @<text>

                    @*<button class="edit-book display-mode" id="@item.BenchEmployeeId">Edit</button>
                        <button class="save-book edit-mode" id="@item.BenchEmployeeId">Save</button>*@

                    <a><span class="ui-icon ui-icon-pencil" id="@item.BenchEmployeeId"></span></a>
                    <a><span class="ui-icon ui-icon-circle-check" id="@item.BenchEmployeeId"></span></a>
                    <a><span class="ui-icon ui-icon-closethick" id="@item.BenchEmployeeId"></span></a>
                    <label id="lblBenchEmployeeID" style="display:none;">@item.BenchEmployeeId</label>
                    </text>),
            benchGrid.Column("Name",
                        format: @<text>

            @*@Html.TextBox("EmployeeNumber", item.EmployeeNumber, new { @class = "edit-mode", size = 45 })*@
    <span size="10">@item.FirstName @item.LastName @item.EmployeeNumber</span>
                    </text>),

            benchGrid.Column("SPOC",
                        header: "SPOC",
                        format: @<text>
                        <span id="SPOC" class="display-mode">@item.SPOC</span>
                        <input type="text" class="edit-mode" id="txtSPOC" size="10" value="@item.SPOC" />
                    </text>),
            benchGrid.Column("ProjectCode",
                        header: "Project Code",
                        format: @<text>
                        <span id="ProjectCode" class="display-mode">@item.ProjectCode</span>
                        @*@Html.TextBox("EmployeeNumber", item.EmployeeNumber, new { @class = "edit-mode", size = 45 })*@
                        <input type="text" class="edit-mode" size="10" id="txtProjectCode" value="@item.ProjectCode" />
                    </text>),
            benchGrid.Column("StartDate",
                        header: "Start Date",
                        format: @<text>
                        <span id="StartDate" class="display-mode">@(@item.StartDate == null ? String.Empty : @item.StartDate.ToString("MM/dd/yyyy"))</span>
                        <input type="text" readonly class="edit-mode date-picker start-date" style="width:100px;" value="@(@item.StartDate == null ? String.Empty : @item.StartDate.ToString("MM/dd/yyyy"))" />
                    </text>),
            benchGrid.Column("EndDate",
                        header: "End Date",
                        format: @<text>
                        <span id="EndDate" class="display-mode">@(@item.EndDate == null ? String.Empty : @item.EndDate.ToString("MM/dd/yyyy"))</span>
                        @*@Html.TextBox("EmployeeNumber", item.EmployeeNumber, new { @class = "edit-mode", size = 45 })*@
                        <input type="text" readonly class="edit-mode date-picker end-date" style="width:100px;" value="@(@item.EndDate == null ? String.Empty : @item.EndDate.ToString("MM/dd/yyyy"))" />
                    </text>),
            benchGrid.Column("Utilization",
                        header: "Utilization %",
                        format: @<text>
                        <span id="Utilization" class="display-mode">@item.Utilization</span>
                        <input type="text" class="edit-mode" id="txtUtilization" size="3" value="@item.Utilization" />
                    </text>),
             benchGrid.Column("LocationType",
                        header: "Location Type",
                        format: @<text>
                        <span id="LocationType" class="display-mode">@item.LocationType</span>
                        @*@Html.TextBox("EmployeeNumber", item.EmployeeNumber, new { @class = "edit-mode", size = 45 })*@

                        @Html.DropDownList("ddlLocationType", locationType, (string)item.LocationType, new { @class = "edit-mode" })

                    </text>),
            benchGrid.Column("Location",
                        header: "Location",
                        format: @<text>
                        <span id="Location" class="display-mode">@item.Location</span>

                        @Html.DropDownList("ddlLocation", location, (string)item.Location, new { @class = "edit-mode" })
                    </text>),
            benchGrid.Column("AssignmentStatus",
                        header: "AssignmentStatus",
                        format: @<text>
                        <span id="AssignmentStatus" class="display-mode">@item.AssignmentStatus</span>
                        @*@Html.TextBox("EmployeeNumber", item.EmployeeNumber, new { @class = "edit-mode", size = 45 })*@
                        @*<input type="text" class="edit-mode" size="10" id="txtAssignmentStatus" value="@item.AssignmentStatus" />*@
                        @Html.DropDownList("ddlAssignmentStatus", assignmentStatus, (string)item.AssignmentStatus, new { @class = "edit-mode" })
                    </text>),
            benchGrid.Column("Comments",
                        header: "Comments",
                        format: @<text>
                        <span id="Comments" class="display-mode">@item.Comments</span>
                        @*<input type="text" class="edit-mode" id="txtComments" size="10" value="@item.Comments" />*@
                        <textarea rows="5" class="edit-mode" cols="20" id="txtComments">@item.Comments</textarea>
                    </text>)
                         
                    @*benchGrid.Column("",

                        format: @<text>
                        <input type="button" id="btnMovetoProject" value="Move to Assignment" />
                        </text>)*@



         ))
   
</div>
        @*@Html.Partial("_BenchEmployeeGrid", Model)*@

</div>




